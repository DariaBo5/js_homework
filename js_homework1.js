1) 'number' + 3 + 3
//number33, відбувається конкатенація, спочатку формується number3, а потім до нього "додається" ще 3 

2) null + 3
//null прирівнюється до 0. 0 + 3 = 3

3) 5 && "qwerty"
// обидва значення true. Оператор і повертає другий операнд, коли обидва є істинними. Відповідь "qwerty"

4) +'40' + +'2' + "hillel";
// 42hillel. Спочатку через унарні плюси рядки перетворюються на числа, тобто 40 і 2 і додаються між собою. Потім конкатенація рядка та числа.

5) '10' - 5 === 6;
//false. 10 буде приведено до числа через віднімання. А далі ми просто порівнюємо 5===6. Ні, значення різні, false.

6) true + false
//через операцію додавання true приводиться до 1, false до нуля. 1+0=1 

7) '4px' - 3
//Nan, бо ми намагаємось відняти число від рядка 

8) '4' - 3
//4 приводиться до числа, бо відбувається віднімання. Відповідь 1.

9)  '6' + 3 ** 0;
//'61'. Спочатку приводимо 3 в нульову ступінь = 1. А потім рядок 6 додаємо до числа 1, спрацьовує конкатенація (бо + і стрінга) і отримуємо '61'

10) 12 / '6'
//Відповідь 2. тут ми приводимо 6 до числа і виконуємо звичайне ділення.

11) '10' + (5 === 6);
//спочатку дивимось чи дорівнюють значення та типи в 5===6. Ні. Це буде false. Потім спрацює конкатенація. Відповідь 10false4

12) null == ''
//false, бо значення не рівні. Плюс, як я розумію, == намагається автоматично привести типи данних, але тут вони різні (об'єкт та рядок)

13) 3 ** (9 / 3);
//спочатку ділимо 9 на 3, а потім піднімаємо 3 в 3-тю ступень. Відповіть 27

14) !!'false' == !!'true'
//оскільки 'false' не є пустим рядком, він є true, після подвійного заперечення він залишається true
// 'true' після подвійного заперечення теж залишається true
//тому ми маємо вираз true == true 
//Відповіть true

15) 0 || '0' && 1
//Спочатку виконуємо оператор і. Оскільки '0' та 1 обидва true, то повернеться другий операнд.
//0 || 1. Поверне 1, оскільки 0 є false

16)  (+null == false) < 1;
//через унарний + null перетворюється на 0. При виконанні порівняння == false буде приведено до 0.
//0 == 0 - true. 
//Та сама логіка true < 1, приводимо true до 1, бо ми порівнюємо. 1 < 1 = false

17) false && true || true
//оператор і має вищий пріорітет, тому починаємо з нього. Тут буде false, бо в операторі і обидва операнди мають бути true, щоб отримати true
//далі у нас буде false або true. Цей оператор віддає true, якщо хоча б один з операндів true
//відповідь - true 

18) false && (false || true);
//То що в дужках поверне true (вище описувала чому), а false && true поверне false (теж вище описувала)
//відповідь false 

19) (+null == false) < 1 ** 5;
//через унарний + null перетворюється на 0. При виконанні порівняння == false буде приведено до 0. Тобто в дужках буде true
//1 в 5й ступені = 1 
//1 < 1 = false 
